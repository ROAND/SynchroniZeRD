#!/usr/bin/env python2
"""Subclass of MainFrame, which is generated by wxFormBuilder."""
import subprocess
from threading import Thread

import sys
if getattr(sys, 'frozen', False):
    pass
else:
    pass
    #import wxversion
    #wxversion.select('2.8-gtk2-unicode')

import wx
print wx.version()
from wx.lib.pubsub import pub
import synchronizerd_UI
import os

# Implementing MainFrame
class SynchroniZeRDMain(synchronizerd_UI.MainFrame):
    def __init__(self, parent):
        """

        @rtype : wx.Frame
        """
        synchronizerd_UI.MainFrame.__init__(self, parent)
        self.SetIcon(wx.Icon(find_data_file('synchronize-rd.png'), wx.BITMAP_TYPE_PNG))
        self.statusText.SetEditable(False)
        self.about_menu_item.SetBitmap(wx.Bitmap(find_data_file('synchronize-rd.png')))

        pub.subscribe(self.show_stdout, "update")
        self.sync_thread = None
        self.dir_from = None
        self.dir_to = None
        self.processo = None
        #Command line arguments
        if len(sys.argv) == 3:
            entrada1 = sys.argv[1]
            print entrada1
            entrada2 = sys.argv[2]
            print entrada2
            if os.path.isdir(entrada1):
                self.dir_from = entrada1
                print "Path 1 is a directory"

            if os.path.isdir(entrada2):
                self.dir_to = entrada2
                print "Path 2 is a directory"

            self.dir_from = entrada1
            self.dir_from = entrada2

    def on_off_dir_changed(self, event):
        self.dir_from = self.off_picker.GetPath()
        print self.dir_from
        pass

    def on_oft_dir_changed(self, event):
        self.dir_to = self.oft_picker.GetPath()
        print self.dir_to
        pass

    def synch_button_click(self, event):
        self.sync_thread = Thread(target=self.synchronize, args=())
        self.sync_thread.start()
        self.statusText.Clear()
        self.synchronize_button.Disable()
        pass

    def on_about_menu_selection( self, event ):
        f = open(find_data_file('COPYING'))
        info = wx.AboutDialogInfo()
        info.AddDeveloper("Ronnie Andrew <ronnieandrew92@gmail.com>")
        info.AddArtist("Ronnie Andrew")
        info.SetDescription("A simple folder synchronizing application on top of rsync and using wxWidgets for the GUI")
        info.SetVersion("1.0.0")
        info.SetName("SynchroniZeRD")
        info.SetWebSite("http://www.roandigital.com/applications/synchronizerd")
        info.SetLicence(f.read())
        info.SetCopyright('This program comes with ABSOLUTELY NO WARRANTY.')
        info.SetIcon(wx.Icon(find_data_file('synchronize-rd.png'), wx.BITMAP_TYPE_PNG))
        about_box = wx.AboutBox(info)


    def synchronize(self):
        self.processo = subprocess.Popen(
            ["rsync", "-av", "--progress", "--size-only", "%s" %
                                                          self.dir_from+"/", "%s" % self.dir_to+"/"], shell=False,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)

        out = self.processo.stdout.readline(150)
        while out != "":
            wx.CallAfter(get_stdout, out)
            out = self.processo.stdout.readline(150)
        wx.CallAfter(pub.sendMessage, "update", msg='Transfer Complete!')
        self.synchronize_button.Enable()

    def show_stdout(self, msg):
        data = msg
        self.statusText.AppendText("%s" % data)
        self.statusText.SetInsertionPointEnd()
        self.statusText.ShowPosition(self.statusText.GetLastPosition())

def get_stdout(content):
    """send process stdout to GUI"""
    pub.sendMessage("update", msg=content)
    pass


def find_data_file(filename):
    if getattr(sys, 'frozen', False):
        # The application is frozen
        datadir = os.path.dirname(sys.executable)
    else:
        # The application is not frozen
        datadir = os.path.dirname(__file__)

    return os.path.join(datadir, filename)


if __name__ == "__main__":
    app = wx.App()
    main = SynchroniZeRDMain(None)
    main.Show()
    app.MainLoop()
